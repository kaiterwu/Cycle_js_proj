{"version":3,"file":"main.js","mappings":"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","sources":["webpack://js_proj_cycle/./src/scripts/timeConvert.js","webpack://js_proj_cycle/./src/scripts/data.js","webpack://js_proj_cycle/./src/index.js","webpack://js_proj_cycle/./src/scripts/sunmoves.js","webpack://js_proj_cycle/./src/scripts/moonPhase.js","webpack://js_proj_cycle/./src/scripts/seasons.js"],"sourcesContent":["export function timeToSeconds(str){\n   let currentHours = parseInt(str.slice(0,2))\n   let currentMinutes = parseInt(str.slice(3,5))\n   let currentSeconds = parseInt(str.slice(6))\n\n   return currentHours*60*60 + currentMinutes*60 + currentSeconds \n}\n\nconst days = {\"01\":31,\"02\":28,\"03\":31,\"04\":30,\"05\":31,\"06\":30,\"07\":31,\"08\":31,\"09\":30,\"10\":31,\"11\":30,\"12\":31}\nconst months = [31,28,31,30,31,30,31,31,30,31,30,31]\nconst sumDays = [31,59,90,120,151,181,212,243,273,304,334,365]\nconst leapMonths = [31,29,31,30,31,30,31,31,30,31,30,31]\nconst sumLeap = [31,60,91,121,152,182,213,244,274,305,336,366]\n//circle starts at first day of winter: 12/01!!!\n\nexport function currentDays(str){\n   const sumDays = [31,59,90,120,151,181,212,243,273,304,334,365]\n   const sumLeap = [31,60,91,121,152,182,213,244,274,305,336,366]\n   let parsedYear = parseInt(str.slice(0,4))\n   let parsedMonth = parseInt(str.slice(5,7))\n   let parsedDay = parseInt(str.slice(8))\n   if (parsedMonth === 12){\n      return parsedDay\n   }\n\n   if(parsedDay%4===0){return sumLeap[parsedMonth-2]+parsedDay+31}\n   else{return sumDays[parsedMonth-2]+parsedDay + 30}\n}\n\nexport function moonPhases(data){\n   let colors = [\"#ffffff\",\"#ffffff\",\"#ffffff\",\"#ffffff\",\"#ffffff\",\"#ffffff\",\"#ffffff\"]\n    const moonIndex = data.currentConditions.moonphase\n   // const moonIndex = data\n\n \n\n      if(moonIndex < 0.125 || moonIndex ===1){\n          colors.splice(0,0,\"#000000\")\n      }\n\n      else if(moonIndex >= 0.125 && moonIndex<0.25){\n          colors.splice(1,0,\"#000000\")\n      }\n      \n      else if(moonIndex >= 0.25 && moonIndex<0.375){\n          colors.splice(2,0,\"#000000\")\n      }\n\n      else if(moonIndex >= 0.375 && moonIndex<0.5){\n          colors.splice(3,0,\"#000000\")\n      }\n\n      else if(moonIndex >= 0.5 && moonIndex<0.625){\n          colors.splice(4,0,\"#000000\")\n      }\n      \n      else if(moonIndex >= 0.625 && moonIndex<0.75){\n          colors.splice(5,0,\"#000000\")\n      }\n      \n      else if(moonIndex >= 0.75 && moonIndex<0.875){\n          colors.splice(6,0,\"#000000\")\n      }\n      \n      else if(moonIndex >= 0.875 && moonIndex<1){\n          colors.splice(7,0,\"#000000\")\n      }\n\n      else{\n          colors.splice(0,0,\"#000000\")\n      }\n         \n     return colors \n\n}\n  \n\n\n    \n\n    \n    ","import {drawSun} from \"./sunmoves\";\nimport { drawSeasons } from \"./seasons\";\nimport { drawMoon } from \"./moonPhase\";\n\nconst apiKey = \"4P48W2KCWFQAQ6SJ99K5H2VBM\"\nconst zip = \"11040\"\nconst now = Math.floor(Date.now()/1000)\n\nexport let fetchData;\n\nexport const getData = async function getCurrentData() {\n    \n    try {\n      //  const response = await fetch(`https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/${zip}/${now}?key=${apiKey}`);\n         const response = await fetch(`../project_docs/2023-03-12.json`);\n       if (response.ok) {\n          const data = await response.json();\n         //  drawSun(data)\n         //  setTimeout(drawMoon(data),1000)\n         //  setTimeout(drawSeasons(data),1000)\n         //  console.log(data)\n         fetchData = data\n         return data\n     \n       } else {\n         throw response;\n       }\n    } catch (errorResponse) {\n        console.error(errorResponse);\n    }\n  }\n\n  \n\n//   export default getCurrentData\n","import Example from \"./scripts/example\";\nimport {drawSun}  from \"./scripts/sunmoves\";\nimport { drawSeasons } from \"./scripts/seasons\";\nimport { drawMoon } from \"./scripts/moonPhase\";\nimport { fetchData,getData } from \"./scripts/data\";\n\n\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    // console.log(\"Hello world!\")\n    // drawSun()\n    // drawSeasons()\n    // drawMoon()\n    (async () => {\n        await getData();\n        drawSun(fetchData);\n        drawMoon(fetchData);\n        drawSeasons(fetchData);\n    })();\n    \n    \n    //silence this code before running webpack before changes to prevent extra queries \n\n    // getCurrentData()\n\n    \n\n});\n\n","import { timeToSeconds } from \"./timeConvert\"\n\nexport function sunPath(data){\n    let sunrise = document.createElement(\"li\")\n    let sunset = document.createElement(\"li\")\n    sunset.innerText = `Sunset Time: ${data.currentConditions.sunset}`\n    sunrise.innerText = `Sunrise Time: ${data.currentConditions.sunrise}`\n    const homeData = document.getElementsByClassName(\"astro-data\")[0]\n    homeData.append(sunrise)\n    homeData.append(sunset)\n};\n\n    //set the dimensions and margins of the graph\nexport function drawSun(queryData){\n\n    const width = 200,\n        height = 200,\n        margin = 20;\n\n    // The radius of the pieplot is half the width or half the height (smallest one). Margin slightly subtracted \n    const radius = Math.min(width, height) / 2 - margin\n\n    // append the svg object to the div called 'sun-path'\n    const svg = d3.select(\"#sun-path\")\n    .append(\"svg\")\n        .attr(\"width\", width)\n        .attr(\"height\", height)\n    .append(\"g\")\n        .attr(\"transform\", `translate(${width / 2},${height / 2})`);\n    \n    // dynamic querydata , javascript time is in UTC, need to convert to EST \n    let currentSeconds = timeToSeconds(queryData.currentConditions.datetime)\n    let sunriseSeconds = timeToSeconds(queryData.currentConditions.sunrise)\n    let sunsetSeconds = timeToSeconds(queryData.currentConditions.sunset)\n    const totalTime = 24*60*60;\n\n    function nightTime(currentSeconds,sunriseSeconds,sunsetSeconds){\n        if(currentSeconds > sunsetSeconds){\n            return totalTime - currentSeconds + sunriseSeconds\n        }else if (currentSeconds < sunriseSeconds){\n           return sunriseSeconds - currentSeconds\n        }\n         else{\n           return totalTime - sunsetSeconds + sunriseSeconds\n        }\n    }\n\n    function dayTime(currentSeconds,sunriseSeconds,sunsetSeconds){\n        if (currentSeconds >sunriseSeconds && currentSeconds < sunsetSeconds){\n            return  sunsetSeconds - currentSeconds\n        }else {\n            return 0 \n        }\n    }\n\n    function timeElapse(currentSeconds,sunriseSeconds,sunsetSeconds){\n        if (currentSeconds > sunriseSeconds){\n           return  currentSeconds - sunriseSeconds\n        }else if (currentSeconds < sunsetSeconds){\n            return  totalTime - sunsetSeconds + currentSeconds\n        }\n    }\n\n    console.log(currentSeconds);\n    console.log(sunriseSeconds);\n    console.log(sunsetSeconds);\n    console.log(nightTime(currentSeconds,sunriseSeconds,sunsetSeconds))\n    console.log(dayTime(currentSeconds,sunriseSeconds,sunsetSeconds))\n    console.log(timeElapse(currentSeconds,sunriseSeconds,sunsetSeconds))\n\n    let nightSeconds = nightTime(currentSeconds,sunriseSeconds,sunsetSeconds)\n    let daySeconds = dayTime(currentSeconds,sunriseSeconds,sunsetSeconds)\n    let nowSeconds = timeElapse(currentSeconds,sunriseSeconds,sunsetSeconds)\n    \n    \n\n    \n\n    // data object\n    // const data = {a:2000,b:2000,c:2000}\n    \n    // //dynamic data \n    const data = {elapse:nowSeconds,day:daySeconds,night:nightSeconds}\n\n    // set color\n    const color = d3.scaleOrdinal()\n    .range([\"#000000\",\"#ff0660\", \"#416fec\",])\n\n    // Compute the position of each group on the pie:\n    const pie = d3.pie()\n    .value(d=>d[1])\n    .sort(null)\n\n    const arc =  d3.arc()\n    .innerRadius(radius-10)\n    .outerRadius(radius);\n    \n        \n\n\n    const data_ready = pie(Object.entries(data))\n\n    // compose chart, each part of the pie is a path that we build using arc function.\n    svg\n    .selectAll('path')\n    .data(data_ready)\n    .join('path')\n    // .attr('d', d3.arc()\n    //     .innerRadius(60)         // KEEP THIS LOGIC FOR MOON DELAY TRANSITION\n    //     .outerRadius(radius))\n    .transition()\n    .duration(2000)\n    .attrTween('d', function(d) {                   // 'd' is current datum and function is \"tween\" function that interpolates through the circle path \n        let i = d3.interpolate(d.startAngle+0.1, d.endAngle);\n        return function(t) {\n            d.endAngle = i(t);\n          return arc(d);\n        };\n   })\n    .style('fill', d => color(d.data[0]))\n    .attr(\"stroke\", \"black\")\n    .style(\"stroke-width\", \"5px\")\n    .style(\"opacity\", 1)\n    \n    \n    \n\n\n}\n\n\n\n\n","\nimport { moonPhases } from \"./timeConvert\";\n\n\nexport function drawMoon(queryData){\n\n    const width = 450,\n        height = 450,\n        margin = 20;\n\n\n    const radius = Math.min(width, height) / 2 - margin\n\n\n    const svg = d3.select(\"#moons\")\n    .append(\"svg\")\n        .attr(\"width\", width)\n        .attr(\"height\", height)\n    .append(\"g\")\n        .attr(\"transform\", `translate(${width / 2},${height / 2})`);\n    \n    \n\n    // data object\n    const data = {\"🌑\":8,\"🌒\":8,\"🌓\":8,\"🌔\":8,\"🌕\":8,\"🌖\":8,\"🌗\":8,\"🌘\":8}\n    \n\n    // set color\n    const color = d3.scaleOrdinal()\n    // .range([\"#ffffff\",\"#000000\",\"#ffffff\",\"#ffffff\",\"#ffffff\",\"#ffffff\",\"#ffffff\",\"#ffffff\"])\n    //dynamic color\n    .range(moonPhases(queryData))\n    \n\n    // Compute the position of each group on the pie:\n    const pie = d3.pie()\n    .value(d=>d[1])\n    .sort(null)\n\n    const arc =  d3.arc()\n    .innerRadius(radius-80)\n    .outerRadius(radius);\n    \n        \n\n\n    const data_ready = pie(Object.entries(data))\n\n    // compose chart, each part of the pie is a path that we build using arc function.\n    svg\n    .selectAll('slice')\n    .data(data_ready)\n    .join('path')\n    .attr('d', arc)\n        .transition().delay(function(d, i) { return i/8 * 1000; })\n        .duration(1000)\n    .style('fill', d => color(d.data[0]))\n    .attr(\"stroke\", \"black\")\n    .style(\"stroke-width\", \"30px\")\n    .style(\"opacity\", 1)\n\n\n    //logic for annotating moons\n\n    svg\n  .selectAll('slices')\n  .data(data_ready)\n  .join('text')\n  .text(function(d){return d.data[0]})\n  .transition()\n  .duration(2000)\n  .attr(\"transform\", function(d) { return `translate(${arc.centroid(d)})`})\n  \n  .style(\"text-anchor\", \"middle\")\n//   .style(\"font-size\", 20)\n  \n\n\n}\n\n\n\n","// code will be similar to sunmoves script \nimport { currentDays } from \"./timeConvert\";\n\nexport function drawSeasons(queryData){\n\n    const width = 600,\n        height = 600,\n        margin = 20;\n\n   \n    const radius = Math.min(width, height) / 2 - margin\n\n    // append the svg object to the div called 'seasons'\n    const svg = d3.select(\"#seasons\")\n    .append(\"svg\")\n        .attr(\"width\", width)\n        .attr(\"height\", height)\n    .append(\"g\")\n        .attr(\"transform\", `translate(${width / 2},${height / 2})`);\n    \n    \n\n    //dynamic data \n    let currentDay = currentDays(queryData.days[0].datetime)\n    const year = parseInt(queryData.days[0].datetime.slice(0,4))\n\n    function winterTime(currentDay){\n        let winter = 0 \n        if (currentDay>90){\n            return 0 \n        }else{\n            return 90 - currentDay\n        }\n    }\n\n    function springTime(currentDay){\n        if (currentDay > 182){\n            return 0 \n        }else if (currentDay > 90){\n            return 182 - currentDay\n        }else{\n            return 92\n        }\n    }\n\n    function summerTime(currentDay){\n        if (currentDay > 273 ){\n            return 0 \n        }else if (currentDay > 182){\n            return 273-currentDay\n        }else{\n            return 92\n        }\n    }\n    \n    function fallTime(currentDay){\n        if (currentDay>273){\n            return 365-currentDay\n        }else{\n            return 91\n        }\n        \n    }\n\n    console.log(winterTime(currentDay))\n    console.log(springTime(currentDay))\n    console.log(summerTime(currentDay))\n    console.log(fallTime(currentDay))\n    console.log(queryData.days[0].datetime)\n\n    const data = \n    {\"current\":currentDay,\"winter\":winterTime(currentDay),\"spring\":springTime(currentDay),\n    \"summer\":summerTime(currentDay),\"fall\":fallTime(currentDay)}\n\n\n\n    // data object\n    // const data = {e:2000,a:2000,b:2000,c:2000,d:2000}\n    \n    \n\n    // set color\n    const color = d3.scaleOrdinal()\n    .range([\"#000000\",\"#99ffe6\",\"#065535\", \"#fff228\",'#f77c3f'])\n\n    // Compute the position of each group on the pie:\n    const pie = d3.pie()\n    .value(d=>d[1])\n    .sort(null)\n\n    const arc =  d3.arc()\n    .innerRadius(radius -40)\n    .outerRadius(radius);\n    \n        \n\n\n    const data_ready = pie(Object.entries(data))\n\n    // compose chart, each part of the pie is a path that we build using arc function.\n    svg\n    .selectAll('path')\n    .data(data_ready)\n    .join('path')\n    // .attr('d', d3.arc()\n    //     .innerRadius(60)         // KEEP THIS LOGIC FOR MOON DELAY TRANSITION\n    //     .outerRadius(radius))\n    .transition()\n    .duration(2000)\n    .attrTween('d', function(d) {                   // 'd' is current datum and function is \"tween\" function that interpolates through the circle path \n        let i = d3.interpolate(d.startAngle+0.1, d.endAngle);\n        return function(t) {\n            d.endAngle = i(t);\n          return arc(d);\n        };\n   })\n    .style('fill', d => color(d.data[0]))\n    .attr(\"stroke\", \"black\")\n    .style(\"stroke-width\", \"20px\")\n    .style(\"opacity\", 1)\n    \n    \n\n\n}"],"names":["timeToSeconds","str","parseInt","slice","fetchData","Math","floor","Date","now","document","addEventListener","async","response","fetch","ok","data","json","errorResponse","console","error","getData","queryData","radius","min","svg","d3","select","append","attr","currentSeconds","currentConditions","datetime","sunriseSeconds","sunrise","sunsetSeconds","sunset","totalTime","nightTime","dayTime","timeElapse","log","nightSeconds","daySeconds","elapse","day","night","color","scaleOrdinal","range","pie","value","d","sort","arc","innerRadius","outerRadius","data_ready","Object","entries","selectAll","join","transition","duration","attrTween","i","interpolate","startAngle","endAngle","t","style","drawSun","colors","moonIndex","moonphase","splice","moonPhases","delay","text","centroid","drawMoon","currentDay","parsedMonth","parsedDay","currentDays","days","winterTime","springTime","summerTime","fallTime","drawSeasons"],"sourceRoot":""}